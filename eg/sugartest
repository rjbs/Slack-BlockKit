#!/usr/bin/env perl
use v5.36.0;

use lib 'lib';

use Data::Dumper::Concise;
use Getopt::Long::Descriptive;
use JSON::XS qw(encode_json);
use Slack::Notify;
use Slack::BlockKit::Sugar -all => { -prefix => 'bk_' };

my ($opt, $usage) = describe_options(
  '%c %o',
  [ 'example|X=s',  'what example to run', { default => 'simple' } ],
  [ 'post',         'actually post' ],
  [ 'perl',         'dumper the blocks struct as Perl, not JSON' ],
);

sub example_simple {
  return bk_blocks(
    bk_header("Behold, the BlockKit"),
    "I imagine you will really like it.  But hey, I could be wrong.",
    bk_divider(),
    "Let us know, when you decode.",
    "We'll be here.",
  );
}

sub example_rich {
  return bk_blocks(
    bk_richblock(
      bk_richsection(
        "Here is a ", bk_italic("safe"), " link: ",
        bk_link("https://fastmail.com/", "click me", { style => { bold => 1 } }),
      ),
      bk_ulist(
        "it will be fun",
        bk_richsection("it will be cool", bk_emoji('smile')),
        "it will be enough",
      ),
    )
  );
}

my $code = main->can("example_" . $opt->example);

unless ($code) {
  die "don't know that example\n";
}

my $blocks = $code->();

if ($opt->perl) {
  print Dumper($blocks->as_struct);
} else {
  say encode_json($blocks->as_struct);
}

if ($opt->post) {
  my $hook = `cat slack-hook.txt`;
  die "can't read hook from slack-hook.txt\n" if $?;

  chomp $hook;
  my $n = Slack::Notify->new(hook_url => $hook);

  my $res = $n->post(
    channel => 'blockkit',
    blocks  => $blocks->as_struct,
  );

  print Dumper($res);
}

